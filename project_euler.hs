-- haskell functions for solving project euler questions!
-- (see projecteuler.net)

-- i am learning this language as i go, so early
-- solutions will probably be horrible

-- problem 1:
-- If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
-- Find the sum of all the multiples of 3 or 5 below 1000.
p1 = sum( [3,6..999] ++ [ x | x <- [5,10..999], not(x `elem` [3,6..999])] )

-- problem 2:
-- Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
-- 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
-- By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
fibnext x = if (x !! 0) > 4000000 then tail x else fibnext ((x !! 0 + x !! 1) : x)
p2 = sum [ x | x <- fibnext [1,1], even x]

-- problem 3:
-- The prime factors of 13195 are 5, 7, 13 and 29.
-- What is the largest prime factor of the number 600851475143 ?

p3 :: Int
p3 = p3func p3num

p3num :: Int
p3num = 600851475143

p3func :: Integral a => a -> a
p3func x 
 | smallestprime x == x = x
 | otherwise            = p3func $ x `div` (smallestprime x)

smallestprime :: Integral a => a -> a
smallestprime x = head [ y | y <- [2,3..x], x `mod` y == 0, isprime y ]

-- a lazily tossed together primality checker
isprime :: Integral a => a -> Bool
isprime x
 | x == 1    = False
 | x == 2    = True
 | otherwise = if length [ y | y <- [2..ceiling $ sqrt $ fromIntegral x], x `mod` y == 0] == 0
    then True
    else False

-- problem 4:
-- A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
-- Find the largest palindrome made from the product of two 3-digit numbers.

p4 :: Int
p4 = maximum $ p4prods (999 :: Int)

p4prods :: (Enum a, Eq a, Num a, Show a) => a -> [a]
p4prods x
 | x == 100  = []
 | otherwise = [ y | y <- sub x, ispalindrome y ] ++ (p4prods $ x-1)
 where sub x          = [ x*y | y <- [x,x-1..100] ]
       ispalindrome x = show x == (reverse $ show x)

-- problem 5:
-- 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
-- What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

p5 :: Int
p5 = head [ y | y <- [1..], sub y 20 ]
 where sub x y
        | y == 1    = True
        | otherwise = if x `mod` y /= 0 then False else sub x (y-1)

-- problem 6:
-- The sum of the squares of the first ten natural numbers is,
-- 12 + 22 + ... + 102 = 385
-- The square of the sum of the first ten natural numbers is,
-- (1 + 2 + ... + 10)2 = 552 = 3025
-- Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
-- Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

p6 = (squareofsum 100) - (sumofsquares 100)

sumofsquares x = sum [ y^2 | y <- [1..x] ]

squareofsum x = (sum [ y | y <- [1..x] ])^2

-- problem 7:
-- By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
-- What is the 10 001st prime number?

p7 = nthprime 10001

nthprime x = [ y :: Int | y <- [1..], isprime y] !! (x-1)

-- problem 8:
-- The four adjacent digits in the 1000-digit number
-- 73167176531330624919225119674426574742355349194934
-- 96983520312774506326239578318016984801869478851843
-- 85861560789112949495459501737958331952853208805511
-- 12540698747158523863050715693290963295227443043557
-- 66896648950445244523161731856403098711121722383113
-- 62229893423380308135336276614282806444486645238749
-- 30358907296290491560440772390713810515859307960866
-- 70172427121883998797908792274921901699720888093776
-- 65727333001053367881220235421809751254540594752243
-- 52584907711670556013604839586446706324415722155397
-- 53697817977846174064955149290862569321978468622482
-- 83972241375657056057490261407972968652414535100474
-- 82166370484403199890008895243450658541227588666881
-- 16427171479924442928230863465674813919123162824586
-- 17866458359124566529476545682848912883142607690042
-- 24219022671055626321111109370544217506941658960408
-- 07198403850962455444362981230987879927244284909188
-- 84580156166097919133875499200524063689912560717606
-- 05886116467109405077541002256983155200055935729725
-- 71636269561882670428252483600823257530420752963450
-- that have the greatest product are 9 × 9 × 8 × 9 = 5832.
-- Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

p8 = maximum $ [ prod4 y | y <- [1..(1000-13)] ]
 where prod4 y = foldl1 (*) $ slice (y-1) 13 $ toDigitArray p8num

p8num = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450

toDigitArray x
 | x == 0    = []
 | otherwise = toDigitArray (x `div` 10) ++ [x `mod` 10]

slice start len xs = take len $ drop start xs
