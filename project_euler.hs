-- haskell functions for solving project euler questions!
-- (see projecteuler.net)

-- problem 1:
-- If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
-- Find the sum of all the multiples of 3 or 5 below 1000.
p1 = sum( [3,6..999] ++ [ x | x <- [5,10..999], not(x `elem` [3,6..999])] )

-- problem 2:
-- Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
-- 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
-- By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
fibnext x = if (x !! 0) > 4000000 then tail x else fibnext ((x !! 0 + x !! 1) : x)
p2 = sum [ x | x <- fibnext [1,1], even x]

-- problem 3:
-- The prime factors of 13195 are 5, 7, 13 and 29.
-- What is the largest prime factor of the number 600851475143 ?

--findfactors :: (Integral [a], Ord a) => [a] -> [a]
p3num = 600851475143
p3 = head [ y | y <- [p3num,p3num-1..1], odd y, p3num `mod` y == 0, isprime y ]

-- a lazily tossed together primality checker
isprime :: Integral a => a -> Bool
isprime x = 
	if length [ y | y <- [2..floor $ sqrt $ fromIntegral x], x `mod` y == 0] == 0 then
		True
	else
		False
