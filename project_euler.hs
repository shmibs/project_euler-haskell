-- haskell functions for solving project euler questions!
-- (see projecteuler.net)

-- i am learning this language as i go, so early
-- solutions will probably be horrible

-- problem 1:
-- If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
-- Find the sum of all the multiples of 3 or 5 below 1000.
p1 = sum( [3,6..999] ++ [ x | x <- [5,10..999], not(x `elem` [3,6..999])] )

-- problem 2:
-- Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
-- 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
-- By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
fibnext x = if (x !! 0) > 4000000 then tail x else fibnext ((x !! 0 + x !! 1) : x)
p2 = sum [ x | x <- fibnext [1,1], even x]

-- problem 3:
-- The prime factors of 13195 are 5, 7, 13 and 29.
-- What is the largest prime factor of the number 600851475143 ?
p3num :: Int
p3num = 600851475143

p3 :: Integral a => a -> a
p3 x 
 | smallestprime x == x = x
 | otherwise            = p3 $ x `div` (smallestprime x)

smallestprime :: Integral a => a -> a
smallestprime x = head [ y | y <- [2,3..x], x `mod` y == 0, isprime y ]

-- a lazily tossed together primality checker
isprime :: Integral a => a -> Bool
isprime x = 
    if length [ y | y <- [2..ceiling $ sqrt $ fromIntegral x], x `mod` y == 0] == 0 then
        True
    else
        False

-- problem 4:
-- A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
-- Find the largest palindrome made from the product of two 3-digit numbers.

p4 = maximum $ p4prods (999 :: Int)

p4prods :: (Enum a, Eq a, Num a, Show a) => a -> [a]
p4prods x
 | x == 100  = []
 | otherwise = [ y | y <- sub x, ispalindrome y ] ++ (p4prods $ x-1)
 where sub x          = [ x*y | y <- [x,x-1..100] ]
       ispalindrome x = show x == (reverse $ show x)



-- problem 5:
-- 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
-- What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

p5 :: Int
p5 = head [ y | y <- [1..], sub y 20 ]
 where sub x y
        | y == 1    = True
        | otherwise = if x `mod` y /= 0 then False else sub x (y-1)

